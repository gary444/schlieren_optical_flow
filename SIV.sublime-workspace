{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fl",
				"flo"
			],
			[
				"inf",
				"info_lines"
			],
			[
				"item",
				"item_name"
			],
			[
				"items",
				"items_with_sets"
			],
			[
				"sets_",
				"sets_per_item"
			],
			[
				"s",
				"set_membership"
			],
			[
				"clb",
				"club_list"
			],
			[
				"link",
				"link_draws"
			],
			[
				"select",
				"selected_team_idx"
			],
			[
				"target",
				"target_wins"
			],
			[
				"sou",
				"source_wins"
			],
			[
				"nearest",
				"nearest_seed_idx"
			],
			[
				"bric",
				"brick_size_vol_space"
			],
			[
				"ed_node",
				"ed_nodes_per_brick_dim"
			],
			[
				"brck",
				"brick_max"
			],
			[
				"index",
				"index_3d"
			],
			[
				"brc",
				"brick_size"
			],
			[
				"brick",
				"brick_idx_3d"
			],
			[
				"seed",
				"seed_pos"
			],
			[
				"first",
				"first_ed_seed_in_brick"
			],
			[
				"ed_no",
				"ed_nodes_per_brick_dim"
			],
			[
				"res",
				"remove_link_labels"
			],
			[
				"line_",
				"line_end"
			],
			[
				"label",
				"label_pos"
			],
			[
				"team",
				"team_to_highlight_id"
			],
			[
				"selected",
				"selected_team"
			],
			[
				"weight",
				"weight_label"
			],
			[
				"ad",
				"adjusted_length"
			],
			[
				"weiht",
				"weight"
			],
			[
				"start",
				"start_shift"
			],
			[
				"des",
				"dest_id"
			],
			[
				"stroke",
				"stroke-width"
			],
			[
				"add",
				"add_labels"
			],
			[
				"se",
				"selected_team_idx"
			],
			[
				"sel",
				"selected_team_idx"
			],
			[
				"selec",
				"selected_team"
			],
			[
				"tr",
				"trophies"
			],
			[
				"appe",
				"appearances"
			],
			[
				"num",
				"num_appearances"
			],
			[
				"app",
				"appearances"
			],
			[
				"line",
				"line_gap"
			],
			[
				"lege",
				"legend_middle_x"
			],
			[
				"opac",
				"opacities"
			],
			[
				"for",
				"forEach"
			],
			[
				"node",
				"node_enter"
			],
			[
				"title",
				"title_line_pos"
			],
			[
				"tit",
				"title_line_pos"
			],
			[
				"show",
				"show_opponents"
			],
			[
				"colo",
				"color"
			],
			[
				"col",
				"color"
			],
			[
				"labl",
				"label_height"
			],
			[
				"label_",
				"label_y"
			],
			[
				"get",
				"get_node_radius_for_matches"
			],
			[
				"sele",
				"selected_team_idx"
			],
			[
				"labe",
				"label_width"
			],
			[
				"angl",
				"angles"
			],
			[
				"re",
				"reordered_cut_lists"
			],
			[
				"ever",
				"ever_presents"
			],
			[
				"evee",
				"ever_presents"
			],
			[
				"svo",
				"svo_idx_to_presence"
			],
			[
				"svo_i",
				"svo_idx_to_presence"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"cut",
				"cut_list_length"
			],
			[
				"end",
				"end_f"
			],
			[
				"subse",
				"subseq_length"
			],
			[
				"time",
				"fullTimeSequenceLength"
			],
			[
				"skele",
				"skeletonNodeId"
			],
			[
				"cut_l",
				"cut_list_length"
			],
			[
				"ma",
				"max_cut_list_size"
			],
			[
				"Cut",
				"CutListEntryBasic"
			],
			[
				"imae",
				"images"
			],
			[
				"out",
				"out_path"
			],
			[
				"triangle",
				"triangle_connections"
			],
			[
				"degre",
				"degree_per_team"
			],
			[
				"weigh",
				"weight_to_radius"
			],
			[
				"proto",
				"prototype"
			],
			[
				"prot",
				"prototype"
			],
			[
				"json",
				"json_obj"
			],
			[
				"check",
				"check_team_name"
			],
			[
				"m",
				"Moscow"
			],
			[
				"tea",
				"team_lookup"
			],
			[
				"year",
				"year_histogram"
			],
			[
				"resul",
				"results_table_entries"
			],
			[
				"homeTeam",
				"homeTeamScore"
			],
			[
				"away",
				"awayTeamScore"
			],
			[
				"home",
				"homeTeamScore"
			],
			[
				"thet",
				"theta1_vals"
			],
			[
				"cot",
				"costs"
			],
			[
				"vis",
				"visualise_all_attributes"
			],
			[
				"total",
				"total_examples"
			],
			[
				"data",
				"data_mat"
			],
			[
				"tot",
				"total_examples"
			],
			[
				"da",
				"data_mat"
			],
			[
				"plot",
				"plot_id"
			],
			[
				"subplo",
				"subplot_cols"
			],
			[
				"subp",
				"subplot_cols"
			],
			[
				"plto",
				"plot_id"
			],
			[
				"targe",
				"target_col"
			],
			[
				"empty",
				"empty_binary"
			],
			[
				"rows",
				"rows_to_remove"
			],
			[
				"empt",
				"empty_binary"
			],
			[
				"cell",
				"cell_col"
			],
			[
				"subpl",
				"subplot_rows"
			],
			[
				"adul",
				"adult_mortality"
			],
			[
				"all",
				"all_data"
			],
			[
				"Thet",
				"Theta_temp"
			],
			[
				"X",
				"X_grad"
			],
			[
				"centroi",
				"centroids"
			],
			[
				"word",
				"word_indices"
			],
			[
				"wor",
				"word_indices"
			],
			[
				"vocab",
				"vocabList"
			],
			[
				"error",
				"error_train"
			],
			[
				"err",
				"error_train"
			],
			[
				"lambda",
				"lambda_vec"
			],
			[
				"lamda",
				"lambda_vec"
			],
			[
				"lambd",
				"lambda_vec"
			],
			[
				"THet",
				"Theta1_reg"
			],
			[
				"T",
				"Theta1_grad"
			],
			[
				"Theta",
				"Theta1_reg"
			],
			[
				"reg",
				"reg_term"
			],
			[
				"Teh",
				"Theta1"
			],
			[
				"MAX",
				"MAX_CIRCLE_SIZE"
			],
			[
				"as",
				"aspect_ratio"
			],
			[
				"lon",
				"lon_range"
			],
			[
				"la",
				"lat_range"
			],
			[
				"convert",
				"convert_coord"
			],
			[
				"con",
				"convert_coord"
			],
			[
				"pub",
				"pubs_to_circle_size"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 83 files for \"SIFT\" (regex)\n\n0 matches\n\nSearching 88 files for \"SIFT\" (regex)\n\n/home/hoqe4365/Documents/repos/schlieren_optical_flow/feature_matching/Descriptors.cpp:\n  103  \n  104  \t\n  105: \tstd::cout << \"Computing SIFT descriptors \" << std::endl;\n  106: \tcv::Ptr< cv::SIFT> sift =  cv::SIFT::create(100, 10, 0, 50.0, 0.5);\n  107: \tsift->compute( img, keypoints, descriptors);\n  108  \n  109  \t//If path provided, draw points to image and save.\n  110  \tif (\"\" != outpath){\n  111: \t\tstd::cout << \"Drawing SIFT descriptors \" << std::endl;\n  112  \t\tcv::Mat output;\n  113  \t\tcv::drawKeypoints(img, keypoints, output, cv::Scalar::all(-1), cv::DrawMatchesFlags(4));\n\n/home/hoqe4365/Documents/repos/schlieren_optical_flow/feature_matching/Matching.cpp:\n    8  \tusing namespace cv;\n    9  \n   10:  \tconst int normType = NORM_L2; // best for SIFT. ORB and other binary descriptors should be compared with NORM_HAMMING2\n   11  \tconst bool crossCheck = true; // check in both directions for more reliable matches\n   12  \tauto matcher = BFMatcher::create(normType, crossCheck); \n\n/home/hoqe4365/Documents/repos/schlieren_optical_flow/minima_and_maxima_tracking.cpp:\n   51          || !cmd_option_exists(argv, argv+argc, \"-diro\")\n   52          || argc < 3){\n   53:         std::cout << \"App for tracking flow at min max points with SIFT features\\n\\n\"\n   54                    << \"flags:\\n\" \n   55                    << \"-diro: directory containing original sequence of images\\n\" \n   ..\n  175        //              Scalar(128,0,0) // no-match colour\n  176        //              );\n  177:       // imwrite(\"../../../images/output/sift_descriptors/matches_\" + std::to_string(i-1) + \"_\" + std::to_string(i) + \".png\", out_img_matches);\n  178  \n  179  \n  ...\n  181        Mat out_arrow_img = og_imgB.clone();\n  182        draw_matches_as_arrows(matches, keypoint_arrays[i-1], keypoint_arrays[i], out_arrow_img, min_highlight_distance_px, max_highlight_distance_px);\n  183:       imwrite(\"../../../images/output/sift_descriptors/movement_1f_\" + std::to_string(i-1) + \"_\" + std::to_string(i) + \".png\", out_arrow_img);\n  184  \n  185  \n  ...\n  201        Mat out_arrow_img = og_imgB.clone();\n  202        draw_matches_as_arrows(matches, keypoint_arrays[i-2], keypoint_arrays[i], out_arrow_img, min_highlight_distance_px*2, max_highlight_distance_px*2);\n  203:       imwrite(\"../../../images/output/sift_descriptors/movement_2f_\" + std::to_string(i-2) + \"_\" + std::to_string(i) + \".png\", out_arrow_img);\n  204  \n  205  \n\n11 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 2536,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "#include <stdio.h>\n#include <sstream>\n\n#include <opencv2/opencv.hpp>\n#include <opencv2/core.hpp>\n#include <opencv2/highgui.hpp>\n#include <opencv2/imgproc.hpp>\n#include <opencv2/videoio.hpp>\n#include <opencv2/video.hpp>\n\n// #include <opencv2/cudaoptflow.hpp>\n\n#include <opencv2/optflow.hpp>\n\n\n\n#include \"helpers/OpenCVHelper.hpp\"\n#include \"helpers/optical_flow_helpers.hpp\"\n#include \"helpers/util.hpp\"\n\n\n\nusing namespace cv;\n\nint main(int argc, char* argv[] )\n{\n\n\n    //capture properties\n    const float real_width_mm = 1481.f;\n    const float time_between_imgs_ms = 20.0f;\n\n    // optical flow settings\n    uint32_t OF_TYPE = 0;\n    bool NORMALISE = false;\n\n    bool CREATE_LEGEND = false;\n\n    std::string outpath = \"\";\n    std::string img1path = \"../images/lena_sq1.png\";\n    std::string img2path = \"../images/lena_sq2.png\";\n\n    if (cmd_option_exists(argv, argv+argc, \"-h\")\n        || argc < 3){\n        std::cout << \"Optical flow app\\n\\n\"\n                  << \"args 1 and 2 should be images to compare\\n\\n\"\n                  << \"flags:\\n\" \n                  << \"-t: optical flow type:\\n\" \n                  << \"\\t0: DenseRLOFOpticalFlow\\n\" \n                  << \"\\t1: DualTVL1OpticalFlow\\n\" \n                  << \"-o: output file path\\n\" \n                  << \"-norm: normalise magnitude image \\n\"\n                  << \"-legend: create legend image to help interpret optical flow results \\n\"\n                  << \"-flo: write flow as float binary with dimensions \\n\"\n                  << std::endl; \n\n        return 0;\n    } \n\n    if (argc > 1) img1path = argv[1];\n    if (argc > 2) img2path = argv[2];\n\n    if (cmd_option_exists(argv, argv+argc, \"-o\")){\n        outpath = get_cmd_option(argv, argv+argc, \"-o\");\n    } \n    if (cmd_option_exists(argv, argv+argc, \"-norm\")){\n        std::cout << \"normalisation active\\n\";\n        NORMALISE = true;\n    } \n    if (cmd_option_exists(argv, argv+argc, \"-t\")){\n        OF_TYPE = atoi(get_cmd_option(argv, argv+argc, \"-t\"));\n    } \n\n    CREATE_LEGEND = cmd_option_exists(argv, argv+argc, \"-legend\");\n\n    // load images\n    std::cout << \"Comparing:\\n\\t\" << img1path << \"\\n\\t\" << img2path << \"\\n\\n\";\n    Mat image1, image2;\n    image1 = imread( img1path, 1 );\n    image2 = imread( img2path, 1 );\n\n    if ( !image1.data && !image2.data ){\n        printf(\"No image data \\n\");\n        return -1;\n    }\n    printMatInfo(image1, \"image1\");\n    printMatInfo(image2, \"image2\");\n\n\n    // optical flow -----------------------------------------------------------------\n    using namespace cv::optflow;\n    Mat of_result = image1;\n\n    if (OF_TYPE == 0){\n\n        std::cout << \"DenseRLOFOpticalFlow...\\n\\n\";\n\n        Ptr<DenseRLOFOpticalFlow> of = DenseRLOFOpticalFlow::create();\n        of->calc(image1, image2, of_result);\n    }\n    else if (OF_TYPE == 1) {\n\n        std::cout << \"DualTVL1OpticalFlow...\\n\\n\";\n\n        Mat image1_bw, image2_bw;\n\n        cvtColor(image1, image1_bw, cv::COLOR_RGB2GRAY);\n        cvtColor(image2, image2_bw, cv::COLOR_RGB2GRAY);\n\n        Ptr<DualTVL1OpticalFlow> of = DualTVL1OpticalFlow::create();\n        of->calc(image1_bw, image2_bw, of_result);\n\n    }\n    \n    printMatInfo(of_result, \"optical flow result\");\n\n\n    // visualise \n\n    std::cout << \"Calculate per-pixel magnitude and angle\" << std::endl;\n\n    Mat flow_parts[2];\n    split(of_result, flow_parts);\n    Mat magnitude, angle, magn_norm;\n\n    cartToPolar(flow_parts[0], flow_parts[1], magnitude, angle, true);\n\n\n    const float pixel_movement_shown_limit = 10.f;\n\n    // rcalculate and eport min and max magnitude before normalisation\n    double min_px_movement, max_px_movement;\n    cv::minMaxLoc(magnitude, &min_px_movement, &max_px_movement);\n    std::cout << \"Min magnitude = \" << min_px_movement << std::endl;\n    std::cout << \"Max magnitude = \" << max_px_movement << std::endl;\n\n\n    // calculate max displacement and speed\n    const float mm_per_pixel = real_width_mm / image1.cols;\n    const float max_displacement = max_px_movement * mm_per_pixel;\n    const float max_speed = max_displacement / time_between_imgs_ms;\n\n    std::cout << \"Max displacement = \" << max_displacement << std::endl;\n    std::cout << \"Max speed        = \" << max_speed << std::endl;\n\n\n    Mat out_img;\n    if (NORMALISE){\n        mats_to_hsv(flow_parts[0], flow_parts[1], max_px_movement, out_img);\n    }\n    else {\n        mats_to_hsv(flow_parts[0], flow_parts[1], pixel_movement_shown_limit, out_img);\n    }\n\n\n    if (CREATE_LEGEND){\n        const float leg_max_mag = NORMALISE ? max_px_movement : pixel_movement_shown_limit;\n        const float max_speed_legend = NORMALISE ? max_speed : (pixel_movement_shown_limit*mm_per_pixel/time_between_imgs_ms);\n        const std::string legend_path = \"../images/legend_\" + std::to_string(leg_max_mag) + \".png\";\n        create_legend(legend_path, leg_max_mag, max_speed_legend);\n    }\n    \n\n\n\n\n    if (\"\" != outpath){\n        std::cout << \"Writing image to \" << outpath << std::endl;\n        imwrite( outpath, out_img );\n    } \n\n    if (cmd_option_exists(argv, argv+argc, \"-flo\")){\n        const std::string ofilepath = get_cmd_option(argv, argv+argc, \"-flo\");\n        // write to file\n\n        std::ofstream outfile(ofilepath, std::ios::binary);\n\n        if (!outfile.is_open()){\n            std::cout << \"Error creating file \" << ofilepath << std::endl;\n            return false;\n        }\n        uint32_t width  = of_result.cols;\n        uint32_t height = of_result.rows;\n\n        outfile.write(reinterpret_cast<char*> (&width), sizeof(uint32_t));\n        outfile.write(reinterpret_cast<char*> (&height), sizeof(uint32_t));\n        outfile.write(reinterpret_cast<char*> (of_result.ptr<float>(0,0)), sizeof(float) * 2 * width * height);\n\n        outfile.close();\n        if (!outfile.good()){\n            std::cout << \"Error creating file \" << ofilepath << std::endl;\n            return false;\n        }\n\n        std::cout << \"Successfully saved Optical Flow\\n\";\n        return true;\n\n    }\n\n\n#if !__APPLE__\n    cv::imshow(\"optical flow\", out_img);\n    waitKey(0);\n#endif\n\n\n    return 0;\n}",
			"file": "single_comparison_and_vis.cpp",
			"file_size": 6051,
			"file_write_time": 132519759938858697,
			"settings":
			{
				"buffer_size": 6051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1849,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "of_lukas_kanade.cpp",
			"settings":
			{
				"buffer_size": 4536,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "of_lukas_kanade.cpp"
			}
		},
		{
			"file": "/home/hoqe4365/.config/sublime-text-3/Packages/User/stdcout.sublime-snippet",
			"settings":
			{
				"buffer_size": 298,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: Function"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 171.0,
		"history":
		[
			"print(a)",
			"b + a",
			"a = 0",
			"pwd",
			"--help",
			"-help",
			"help",
			"b = a",
			"a= 2",
			"pwd",
			"b = a",
			"a = 10",
			"a",
			"a = 2",
			"quit()",
			"pwd"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/hoqe4365/Documents/repos/schlieren_optical_flow",
		"/home/hoqe4365/Documents/repos/schlieren_optical_flow/helpers"
	],
	"file_history":
	[
		"/home/hoqe4365/Pictures/embedded_deformation/optflo_corrs/sparse_of/lukas_kanade_tests/grid_point_selection_sp20_wndw30.png",
		"/home/hoqe4365/Documents/repos/schlieren_optical_flow/helpers/util.hpp",
		"/home/hoqe4365/Documents/repos/schlieren_optical_flow/SIV.sublime-project",
		"/home/hoqe4365/Documents/repos/schlieren_optical_flow/feature_matching/Descriptors.cpp",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/manager_metro_map/data/premier_league_clubs.csv",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/manager_metro_map/manager_club_country_list.txt",
		"/Users/garyrendle/Documents/9_WORK/BUW/repos/DeformationGraph/,",
		"/Users/garyrendle/Documents/5_PROGRAMMING/github-io-site/gary444.github.io/cl_vis.html",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/src/titles.js",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/src/details.js",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/python/result.py",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/python/cl_result_scraper.py",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/css/master.css",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/index.html",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/src/modules/d3.v5.min.js",
		"/Users/garyrendle/Documents/2_TEACHING/coding/programming_tutorial_12_8_20/draw_circle.py",
		"/Users/garyrendle/Documents/2_TEACHING/coding/programming_tutorial_12_8_20/pentagon.py",
		"/Users/garyrendle/Documents/5_PROGRAMMING/C++/4D_stuff/main.cpp",
		"/Users/garyrendle/Downloads/volume.frag",
		"/Users/garyrendle/Documents/1_Human Computer Interaction/Semester 2/Visualisation/Project/VisFinal/src/modules/RadialNodeDiagram.js",
		"/Users/garyrendle/Documents/1_Human Computer Interaction/Semester 2/Visualisation/Project/VisFinal/src/modules/interactions.js",
		"/Users/garyrendle/Documents/9_WORK/BUW/SchlierenImages/octave/PIVlab/PIVlab_GUI.m",
		"/Users/garyrendle/Documents/0_THESIS/HelpfulCode/adrian/marching_cubes/recon_integration_TRI_TABLE.cpp",
		"/Users/garyrendle/Documents/0_THESIS/HelpfulCode/adrian/marching_cubes/cleaned_up_tsdf_marching_cubes.vs",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/js/template/readme",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/0_CHART_LIBRARY/js/EuroChoroplethMap.js",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/data/cl_nodes_links.json",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/CL_network_graph/data/scraped_results.txt",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/sigmoid.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/Projects/LifeExpectancy/.gitignore",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/runkMeans.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week9/machine-learning-ex8/ex8/selectThreshold.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week9/machine-learning-ex8/ex8/ex8.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week9/machine-learning-ex8/ex8/estimateGaussian.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/recoverData.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/projectData.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/ex7_pca.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/ex7.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/kMeansInitCentroids.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/computeCentroids.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/pca.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week8/machine-learning-ex7/ex7/findClosestCentroids.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/processEmail.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/emailFeatures.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/ex6_spam.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/svmTrain.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/gaussianKernel.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/ex6.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/dataset3Params.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week7/machine-learning-ex6/ex6/linearKernel.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/linearRegCostFunction.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/learningCurve.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/polyFeatures.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/ex5.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/trainLinearReg.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/lrCostFunction.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week6/machine-learning-ex5/ex5/validationCurve.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/nnCostFunction.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/computeNumericalGradient.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/predict.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/ex4.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/checkNNGradients.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/randInitializeWeights.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/uk_maps/data/DEM/terr50_gagg_gb/gb.txt",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week5/machine-learning-ex4/ex4/sigmoidGradient.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/ex3_nn.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/predictOneVsAll.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/ex3.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/costFunctionReg.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/oneVsAll.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/predict.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/ex2.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/costFunction.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week4/machine-learning-ex3/ex3/displayData.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Machine_Learning/AndrewNgCourse/Assignments/Week3/machine-learning-ex2/ex2/plotData.m",
		"/Users/garyrendle/Documents/5_PROGRAMMING/Viz/uk_pub_map/python/display_pubs.py",
		"/Library/FreeImage/Makefile.osx",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/cmake/modules/find_freeimage.cmake",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/scripts/ktree_timing_script.sh",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/scripts/multi_tree_timing.sh",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/scripts/prepare_multi_trees.sh",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/scripts/timing_master_script.sh",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/common/src/TimeTree/TimeTree.cpp",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/apps/gpu_tsdf_svo_extraction/main.cpp",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/common/include/grt/Util.hpp",
		"/Users/garyrendle/Documents/5_PROGRAMMING/ThesisMainRepo/Temporal_TSDF_SVO/scripts/per_frame_duration_script.sh",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/StringUtil.h",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/4D_Baseline/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/gpu_multi_tree_extraction/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/TimeTree/KWayTimeTreeBuilder.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/TimeReporter.h",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/TimeReporter.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/scripts/create_some_teddys.sh",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/CutSelection/MultiTreeCutSelection.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/CutSelection/ParallelCutSelection.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/CutSelection/MultiTreeCutSelection.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/scripts/prepare_evaluation_datasets.sh",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/scripts/prepare_multi_trees.sh",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/ttree_preprocessor_binaries/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/kway_ttree_preprocessor/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/multi_kway_ttree_preprocessor/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/temporalSVO/TimeTree/TimeTree.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/multi_kway_ttree_preprocessor/AssignNodesToTrees.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/FileOperations/SVOFileOperations.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/multi_kway_ttree_preprocessor/PrintHistogram.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/gpu_multi_tree_extraction/mouse_and_keyboard_callbacks.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/install/include/grt/MarchingCubes/MarchingCubesCache.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/MarchingCubes/MarchingCubesShared.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/CMakeLists.txt",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/ErrorCalculation/TemporalErrorCalculator.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/resources/shaders/forward_triangle_rendering.frag",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/gpu_tsdf_svo_extraction/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/ErrorCalculation/TemporalErrorCalculator.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/resources/shaders/include/marching_cubes.incl",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/resources/shaders/forward_triangle_rendering.vert",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/resources/shaders/apron_extraction.vert",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/install/include/grt/PrintHistogram.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/FileOperations/KWayTimeTreeFileOperations.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/src/TimeTree/KWayTimeTree.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/TimeTree/KWayTimeTree.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/TimeTree/MTree.hpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/delta_e/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/data_block_vis/main.cpp",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/projective_texture_creator/stb_image_write.h",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/common/include/grt/FileExtensions.h",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/gpu_multi_tree_extraction/stb_image_write.h",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/sandbox/CMakeLists.txt",
		"/home/hoqe4365/Documents/thesis/Temporal_TSDF_SVO/apps/projective_texture_creator/main.cpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/hoqe4365/Documents/repos/schlieren_optical_flow",
			"/home/hoqe4365/Documents/repos/4d_playground/resources"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"create_random_colours",
			"NORMALISE",
			"SIFT"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2536,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										226,
										230
									],
									[
										280,
										284
									],
									[
										286,
										290
									],
									[
										298,
										302
									],
									[
										343,
										347
									],
									[
										514,
										518
									],
									[
										843,
										847
									],
									[
										1330,
										1334
									],
									[
										1628,
										1632
									],
									[
										2005,
										2009
									],
									[
										2388,
										2392
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								159,
								159
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "single_comparison_and_vis.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6051,
						"regions":
						{
						},
						"selection":
						[
							[
								6051,
								6051
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1196.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1849,
						"regions":
						{
						},
						"selection":
						[
							[
								1653,
								1653
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "of_lukas_kanade.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4536,
						"regions":
						{
						},
						"selection":
						[
							[
								4032,
								4032
							]
						],
						"settings":
						{
							"auto_name": "of_lukas_kanade.cpp",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1392.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/hoqe4365/.config/sublime-text-3/Packages/User/stdcout.sublime-snippet",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 298,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"default_extension": "sublime-snippet",
							"syntax": "Packages/XML/XML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 49.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "SIV",
	"project": "SIV.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"helper",
				"helpers/util.hpp"
			],
			[
				"PIVlab_GUI",
				"octave/PIVlab/PIVlab_GUI.m"
			],
			[
				"projectData",
				"Week8/machine-learning-ex7/ex7/projectData.m"
			],
			[
				"pca",
				"Week8/machine-learning-ex7/ex7/ex7_pca.m"
			],
			[
				"PCA",
				"Week8/machine-learning-ex7/ex7/pca.m"
			],
			[
				"cost",
				"Week3/machine-learning-ex2/ex2/costFunctionReg.m"
			],
			[
				"cos",
				"ex2/costFunction.m"
			],
			[
				"si",
				"ex2/sigmoid.m"
			],
			[
				"utils.in",
				"resources/shaders/include/utils.incl"
			],
			[
				"triangle_extraction_multi",
				"resources/shaders/multi/triangle_extraction_multi.vert"
			],
			[
				"gpu_multi main",
				"apps/gpu_multi_tree_extraction/main.cpp"
			],
			[
				"util",
				"common/include/grt/Util.hpp"
			],
			[
				"stringut",
				"common/include/grt/StringUtil.h"
			],
			[
				"gpu tsdf main",
				"apps/gpu_tsdf_svo_extraction/main.cpp"
			],
			[
				"timerepor",
				"common/src/TimeReporter.cpp"
			],
			[
				"timerepoer",
				"common/include/grt/TimeReporter.h"
			],
			[
				"multi",
				"common/include/grt/CutSelection/MultiTreeCutSelection.hpp"
			],
			[
				"multicut",
				"common/src/CutSelection/MultiTreeCutSelection.cpp"
			],
			[
				"parallel",
				"common/src/CutSelection/ParallelCutSelection.cpp"
			],
			[
				"prepa",
				"scripts/prepare_multi_trees.sh"
			],
			[
				"gpu_mul main",
				"apps/gpu_multi_tree_extraction/main.cpp"
			],
			[
				"process main kwa",
				"apps/kway_ttree_preprocessor/main.cpp"
			],
			[
				"main process",
				"apps/multi_kway_ttree_preprocessor/main.cpp"
			],
			[
				"processor main",
				"apps/ttree_preprocessor_binaries/main.cpp"
			],
			[
				"timetree",
				"common/src/TimeTree/TimeTree.cpp"
			],
			[
				"baseline main",
				"apps/4D_Baseline/main.cpp"
			],
			[
				"main gpu",
				"apps/gpu_tsdf_svo_extraction/main.cpp"
			],
			[
				"gpu main",
				"apps/gpu_tsdf_svo_extraction/main.cpp"
			],
			[
				"marchingcubes",
				"install/include/grt/MarchingCubes/MarchingCubesCache.hpp"
			],
			[
				"4D baseline main",
				"apps/4D_Baseline/main.cpp"
			],
			[
				"keybo",
				"apps/gpu_multi_tree_extraction/mouse_and_keyboard_callbacks.cpp"
			],
			[
				"svofileoper",
				"common/include/grt/FileOperations/SVOFileOperations.hpp"
			],
			[
				"temporalerror",
				"common/include/grt/ErrorCalculation/TemporalErrorCalculator.hpp"
			],
			[
				"forwa",
				"resources/shaders/forward_triangle_rendering.frag"
			],
			[
				"tempora",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"tempor",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"histogram",
				"install/include/grt/PrintHistogram.hpp"
			],
			[
				"multi ttree main",
				"apps/multi_kway_ttree_preprocessor/AssignNodesToTrees.hpp"
			],
			[
				"mtree",
				"common/include/grt/TimeTree/MTree.hpp"
			],
			[
				"temporalerr",
				"common/include/grt/ErrorCalculation/TemporalErrorCalculator.hpp"
			],
			[
				"Temporalerr",
				"common/include/grt/ErrorCalculation/TemporalErrorCalculator.hpp"
			],
			[
				"keboar",
				"apps/gpu_multi_tree_extraction/mouse_and_keyboard_callbacks.cpp"
			],
			[
				"sandbox cmake",
				"apps/sandbox/CMakeLists.txt"
			],
			[
				"temporal",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"multi gpu main",
				"apps/gpu_multi_tree_extraction/main.cpp"
			],
			[
				"filee",
				"common/include/grt/FileExtensions.h"
			],
			[
				"multi main",
				"apps/multi_kway_ttree_preprocessor/main.cpp"
			],
			[
				"kway fil",
				"common/include/grt/FileOperations/KWayTimeTreeFileOperations.hpp"
			],
			[
				"compact",
				"common/src/SVO/CompactSVONode.cpp"
			],
			[
				"multitree main",
				"apps/multi_kway_ttree_preprocessor/AssignNodesToTrees.hpp"
			],
			[
				"Immutabl",
				"common/src/SVO/ImmutableSVO.cpp"
			],
			[
				"paralell",
				"common/src/CutSelection/ParallelCutSelection.cpp"
			],
			[
				"main ttre",
				"apps/ttree_preprocessor_binaries/main.cpp"
			],
			[
				"ttree_prepr",
				"build/bin/thesis_ttree_preprocessor_binaries"
			],
			[
				"temporalerro",
				"common/include/grt/ErrorCalculation/TemporalErrorCalculator.hpp"
			],
			[
				"mouse",
				"apps/gpu_tsdf_svo_extraction/mouse_and_keyboard_callbacks.cpp"
			],
			[
				"svoi",
				"resources/shaders/include/svo_types.incl"
			],
			[
				"SVOFile",
				"common/include/grt/FileOperations/SVOFileOperations.hpp"
			],
			[
				"TEmporalerrorcalc",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"svofileopera",
				"common/include/grt/FileOperations/SVOFileOperations.hpp"
			],
			[
				"KWayfile",
				"common/include/grt/FileOperations/KWayTimeTreeFileOperations.hpp"
			],
			[
				"TimeTreeFile",
				"common/include/grt/FileOperations/TimeTreeFileOperations.hpp"
			],
			[
				"marching",
				"resources/shaders/include/marching_cubes.incl"
			],
			[
				"compa",
				"install/include/grt/SVO/CompactSVONode.hpp"
			],
			[
				"generic",
				"common/include/grt/trees/GenericSVO.hpp"
			],
			[
				"",
				"apps/temporalSVO/TimeTree/TimeTree.hpp"
			],
			[
				"TimeTree",
				"common/src/TimeTree/TimeTreeBuilder.cpp"
			],
			[
				"TimeTreeNde",
				"apps/temporalSVO/TimeTree/TimeTreeNode.hpp"
			],
			[
				"TimeTree.cpp",
				"apps/temporalSVO/TimeTree/TimeTree.cpp"
			],
			[
				"timeTree",
				"apps/temporalSVO/TimeTree/TimeTree.hpp"
			],
			[
				"kway_ttre",
				"apps/kway_ttree_preprocessor/main.cpp"
			],
			[
				"TimeTreeFileO",
				"common/include/grt/FileOperations/TimeTreeFileOperations.hpp"
			],
			[
				"kwaytimetreeb",
				"common/src/TimeTree/KWayTimeTreeBuilder.cpp"
			],
			[
				"fileoper",
				"common/include/grt/FileOperations/SVOFileOperations.hpp"
			],
			[
				"ttree main",
				"apps/ttree_preprocessor_binaries/main.cpp"
			],
			[
				"temporalErr",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"GEner",
				"common/include/grt/trees/GenericSVO.hpp"
			],
			[
				"temporalerroc",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			],
			[
				"gpu_tsd main",
				"apps/gpu_tsdf_svo_extraction/main.cpp"
			],
			[
				"ttree_preprocessor_binaries.c",
				"apps/ttree_preprocessor_binaries/main.cpp"
			],
			[
				"TemporalEr",
				"common/src/ErrorCalculation/TemporalErrorCalculator.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "KWayTimeTree",
		"selected_items":
		[
			[
				"KWayTimeTree",
				"src/TimeTree/KWayTimeTreeNode.cpp.s"
			]
		],
		"width": 758.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 301.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
